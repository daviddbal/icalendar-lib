package net.balsoftware.parameters;

import java.util.HashMap;
import java.util.Map;

import net.balsoftware.parameters.Range.RangeType;

/**
 * RANGE
 * Recurrence Identifier Range
 * RFC 5545, 3.2.13, page 23
 * 
 * To specify the effective range of recurrence instances from
 *  the instance specified by the recurrence identifier specified by
 *  the property.
 * 
 * Example:
 * RECURRENCE-ID;RANGE=THISANDFUTURE:19980401T133000Z
 * 
 * @author David Bal
 *
 */
public class Range extends ParameterBase<Range, RangeType>
{
    /** Set THISANDFUTURE as default value */
    public Range()
    {
        super(RangeType.THIS_AND_FUTURE);
    }
  
    public Range(RangeType value)
    {
        super(value);
    }

    public Range(String content)
    {
        super(RangeType.enumFromName(content));
    }
    
    public Range(Range source)
    {
        super(source);
    }  
    
    public enum RangeType
    {
        THIS_AND_FUTURE ("THISANDFUTURE"),
        THIS_AND_PRIOR ("THISANDPRIOR"); // "THISANDPRIOR" is deprecated by this revision of iCalendar and MUST NOT be generated by applications.
        
        private static Map<String, RangeType> enumFromNameMap = makeEnumFromNameMap();
        private static Map<String, RangeType> makeEnumFromNameMap()
        {
            Map<String, RangeType> map = new HashMap<>();
            RangeType[] values = RangeType.values();
            for (int i=0; i<values.length; i++)
            {
                map.put(values[i].toString(), values[i]);
            }
            return map;
        }
        /** get enum from name */
        public static RangeType enumFromName(String propertyName)
        {
            return enumFromNameMap.get(propertyName.toUpperCase());
        }
        
        private String name;
        @Override public String toString() { return name; }
        RangeType(String name)
        {
            this.name = name;
        }
    }

    public static Range parse(String content)
    {
        Range parameter = new Range();
        parameter.parseContent(content);
        return parameter;
    }
}